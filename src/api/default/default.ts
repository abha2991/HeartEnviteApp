/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * HeartEnvite
 * The HeartEnvite API description
 * OpenAPI spec version: 3.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../axios-instance";
import { customInstance } from "../axios-instance";
import type {
  CardcaptiondetailsControllerUpdateCaptionDetails200,
  CardcaptionEntity,
  CardControllerReceptionCard4201,
  CardControllerUpdatepaymentstatus200,
  CardDetailsDto,
  CardDto,
  CardEntity,
  CardetailsControllerGetCardsByPrice200,
  CardetailsControllerGetCardsByPriceParams,
  CardetailsControllerUpdateCardDetails200,
  CardsCaptionDto,
  Contactus,
  CreateCaptionDto,
  CreateCardetailDto,
  CreateContactusDto,
  CreateCustomizecardsqueryDto,
  CreatePaymentgatewayDto,
  CreateUserDto,
  CreateVideorediDto,
  Customizecardsquery,
  LoginDto,
  PaymentgatewayControllerCreate201,
  PaymentgatewayControllerSuccess201,
  SuccessDto,
  UpdateCardUserDto,
  UpdateUserDto,
  User,
  UserCardEntity,
  VideoDto,
} from "../types";

export const appControllerPing = (signal?: AbortSignal) => {
  return customInstance<string>({ url: `/api`, method: "get", signal });
};

export const getAppControllerPingQueryKey = () => [`/api`];

export type AppControllerPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerPing>>
>;
export type AppControllerPingQueryError = ErrorType<unknown>;

export const useAppControllerPing = <
  TData = Awaited<ReturnType<typeof appControllerPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerPing>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerPingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerPing>>
  > = ({ signal }) => appControllerPing(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof appControllerPing>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const usersControllerCreate = (createUserDto: CreateUserDto) => {
  return customInstance<User>({
    url: `/api/users`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
  });
};

export type UsersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerCreate>>
>;
export type UsersControllerCreateMutationBody = CreateUserDto;
export type UsersControllerCreateMutationError = ErrorType<unknown>;

export const useUsersControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const usersControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<User[]>({
    url: `/api/users`,
    method: "get",
    signal,
  });
};

export const getUsersControllerFindAllQueryKey = () => [`/api/users`];

export type UsersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = ErrorType<unknown>;

export const useUsersControllerFindAll = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindAll>>
  > = ({ signal }) => usersControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const usersControllerNoOfUsers = (signal?: AbortSignal) => {
  return customInstance<number>({
    url: `/api/users/totalUsers`,
    method: "get",
    signal,
  });
};

export const getUsersControllerNoOfUsersQueryKey = () => [
  `/api/users/totalUsers`,
];

export type UsersControllerNoOfUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerNoOfUsers>>
>;
export type UsersControllerNoOfUsersQueryError = ErrorType<unknown>;

export const useUsersControllerNoOfUsers = <
  TData = Awaited<ReturnType<typeof usersControllerNoOfUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerNoOfUsers>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerNoOfUsersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerNoOfUsers>>
  > = ({ signal }) => usersControllerNoOfUsers(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof usersControllerNoOfUsers>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const usersControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customInstance<User>({
    url: `/api/users/${id}`,
    method: "get",
    signal,
  });
};

export const getUsersControllerFindOneQueryKey = (id: string) => [
  `/api/users/${id}`,
];

export type UsersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerFindOneQueryError = ErrorType<unknown>;

export const useUsersControllerFindOne = <
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindOne>>
  > = ({ signal }) => usersControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof usersControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const usersControllerUpdate = (
  id: string,
  updateUserDto: UpdateUserDto
) => {
  return customInstance<void>({
    url: `/api/users/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: updateUserDto,
  });
};

export type UsersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerUpdateMutationBody = UpdateUserDto;
export type UsersControllerUpdateMutationError = ErrorType<unknown>;

export const useUsersControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersControllerUpdate(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const usersControllerRemove = (id: string) => {
  return customInstance<void>({
    url: `/api/users/${id}`,
    method: "delete",
  });
};

export type UsersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRemove>>
>;

export type UsersControllerRemoveMutationError = ErrorType<unknown>;

export const useUsersControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return usersControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const usersControllerUpdatePassword = (id: string) => {
  return customInstance<void>({
    url: `/api/users/updatePassword/${id}`,
    method: "patch",
  });
};

export type UsersControllerUpdatePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdatePassword>>
>;

export type UsersControllerUpdatePasswordMutationError = ErrorType<unknown>;

export const useUsersControllerUpdatePassword = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdatePassword>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdatePassword>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return usersControllerUpdatePassword(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof usersControllerUpdatePassword>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerViewer = (signal?: AbortSignal) => {
  return customInstance<User>({
    url: `/api/auth/me`,
    method: "get",
    signal,
  });
};

export const getAuthControllerViewerQueryKey = () => [`/api/auth/me`];

export type AuthControllerViewerQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerViewer>>
>;
export type AuthControllerViewerQueryError = ErrorType<unknown>;

export const useAuthControllerViewer = <
  TData = Awaited<ReturnType<typeof authControllerViewer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerViewer>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerViewerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerViewer>>
  > = ({ signal }) => authControllerViewer(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof authControllerViewer>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const authControllerLogin = (loginDto: LoginDto) => {
  return customInstance<void>({
    url: `/api/auth/login`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: loginDto,
  });
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = ErrorType<unknown>;

export const useAuthControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerLogout = () => {
  return customInstance<void>({
    url: `/api/auth/logout`,
    method: "post",
  });
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;

export type AuthControllerLogoutMutationError = ErrorType<unknown>;

export const useAuthControllerLogout = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TVariables
  > = () => {
    return authControllerLogout();
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerRegister = (createUserDto: CreateUserDto) => {
  return customInstance<void>({
    url: `/api/auth/register`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
  });
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = CreateUserDto;
export type AuthControllerRegisterMutationError = ErrorType<unknown>;

export const useAuthControllerRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerGoogleAuth = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/auth/google`,
    method: "get",
    signal,
  });
};

export const getAuthControllerGoogleAuthQueryKey = () => [`/api/auth/google`];

export type AuthControllerGoogleAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerGoogleAuthQueryError = ErrorType<unknown>;

export const useAuthControllerGoogleAuth = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuth>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>
  > = ({ signal }) => authControllerGoogleAuth(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const authControllerGoogleAuthCallback = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/auth/google/callback`,
    method: "get",
    signal,
  });
};

export const getAuthControllerGoogleAuthCallbackQueryKey = () => [
  `/api/auth/google/callback`,
];

export type AuthControllerGoogleAuthCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
>;
export type AuthControllerGoogleAuthCallbackQueryError = ErrorType<unknown>;

export const useAuthControllerGoogleAuthCallback = <
  TData = Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthCallbackQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
  > = ({ signal }) => authControllerGoogleAuthCallback(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const authControllerFacebookAuth = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/auth/facebook`,
    method: "get",
    signal,
  });
};

export const getAuthControllerFacebookAuthQueryKey = () => [
  `/api/auth/facebook`,
];

export type AuthControllerFacebookAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerFacebookAuth>>
>;
export type AuthControllerFacebookAuthQueryError = ErrorType<unknown>;

export const useAuthControllerFacebookAuth = <
  TData = Awaited<ReturnType<typeof authControllerFacebookAuth>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerFacebookAuth>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerFacebookAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerFacebookAuth>>
  > = ({ signal }) => authControllerFacebookAuth(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof authControllerFacebookAuth>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const authControllerFacebookAuthCallback = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/auth/facebook/callback`,
    method: "get",
    signal,
  });
};

export const getAuthControllerFacebookAuthCallbackQueryKey = () => [
  `/api/auth/facebook/callback`,
];

export type AuthControllerFacebookAuthCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerFacebookAuthCallback>>
>;
export type AuthControllerFacebookAuthCallbackQueryError = ErrorType<unknown>;

export const useAuthControllerFacebookAuthCallback = <
  TData = Awaited<ReturnType<typeof authControllerFacebookAuthCallback>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerFacebookAuthCallback>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerFacebookAuthCallbackQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerFacebookAuthCallback>>
  > = ({ signal }) => authControllerFacebookAuthCallback(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof authControllerFacebookAuthCallback>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerCreate = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card/card`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerCreate>>
>;
export type CardControllerCreateMutationBody = CardDto;
export type CardControllerCreateMutationError = ErrorType<unknown>;

export const useCardControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerCreate>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerCreate>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerCreate>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerCard = (cardDto: CardDto) => {
  return customInstance<UserCardEntity>({
    url: `/api/card1/create`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerCard>>
>;
export type CardControllerCardMutationBody = CardDto;
export type CardControllerCardMutationError = ErrorType<unknown>;

export const useCardControllerCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerPreviewCard = (cardDto: CardDto) => {
  return customInstance<UserCardEntity>({
    url: `/api/card1/preview`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerPreviewCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerPreviewCard>>
>;
export type CardControllerPreviewCardMutationBody = CardDto;
export type CardControllerPreviewCardMutationError = ErrorType<unknown>;

export const useCardControllerPreviewCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerPreviewCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerPreviewCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerPreviewCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerPreviewCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard>>
>;
export type CardControllerWeddingCardMutationBody = CardDto;
export type CardControllerWeddingCardMutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard1>>
>;
export type CardControllerWeddingCard1MutationBody = CardDto;
export type CardControllerWeddingCard1MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard2>>
>;
export type CardControllerWeddingCard2MutationBody = CardDto;
export type CardControllerWeddingCard2MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard3 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard3`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard3MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard3>>
>;
export type CardControllerWeddingCard3MutationBody = CardDto;
export type CardControllerWeddingCard3MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard3 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard3>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard3>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard3(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard3>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard4 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard4`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard4MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard4>>
>;
export type CardControllerWeddingCard4MutationBody = CardDto;
export type CardControllerWeddingCard4MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard4 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard4>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard4>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard4(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard4>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard5 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard5`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard5MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard5>>
>;
export type CardControllerWeddingCard5MutationBody = CardDto;
export type CardControllerWeddingCard5MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard5 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard5>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard5>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard5(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard5>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard6 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard6`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard6MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard6>>
>;
export type CardControllerWeddingCard6MutationBody = CardDto;
export type CardControllerWeddingCard6MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard6 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard6>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard6>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard6(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard6>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard7 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard7`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard7MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard7>>
>;
export type CardControllerWeddingCard7MutationBody = CardDto;
export type CardControllerWeddingCard7MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard7 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard7>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard7>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard7(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard7>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard8 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard8`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard8MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard8>>
>;
export type CardControllerWeddingCard8MutationBody = CardDto;
export type CardControllerWeddingCard8MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard8 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard8>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard8>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard8(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard8>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard9 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard9`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard9MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard9>>
>;
export type CardControllerWeddingCard9MutationBody = CardDto;
export type CardControllerWeddingCard9MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard9 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard9>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard9>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard9(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard9>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard10 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard10`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard10MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard10>>
>;
export type CardControllerWeddingCard10MutationBody = CardDto;
export type CardControllerWeddingCard10MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard10 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard10>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard10>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard10(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard10>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard11 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard11`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard11MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard11>>
>;
export type CardControllerWeddingCard11MutationBody = CardDto;
export type CardControllerWeddingCard11MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard11 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard11>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard11>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard11(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard11>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard12 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard12`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard12MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard12>>
>;
export type CardControllerWeddingCard12MutationBody = CardDto;
export type CardControllerWeddingCard12MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard12 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard12>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard12>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard12(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard12>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard13 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard13`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard13MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard13>>
>;
export type CardControllerWeddingCard13MutationBody = CardDto;
export type CardControllerWeddingCard13MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard13 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard13>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard13>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard13(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard13>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard14 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard14`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard14MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard14>>
>;
export type CardControllerWeddingCard14MutationBody = CardDto;
export type CardControllerWeddingCard14MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard14 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard14>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard14>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard14(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard14>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard15 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard15`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard15MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard15>>
>;
export type CardControllerWeddingCard15MutationBody = CardDto;
export type CardControllerWeddingCard15MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard15 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard15>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard15>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard15(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard15>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerWeddingCard16 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/weddingcard16`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerWeddingCard16MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerWeddingCard16>>
>;
export type CardControllerWeddingCard16MutationBody = CardDto;
export type CardControllerWeddingCard16MutationError = ErrorType<unknown>;

export const useCardControllerWeddingCard16 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerWeddingCard16>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerWeddingCard16>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerWeddingCard16(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerWeddingCard16>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBabyShowerCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/babyshower`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBabyShowerCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBabyShowerCard>>
>;
export type CardControllerBabyShowerCardMutationBody = CardDto;
export type CardControllerBabyShowerCardMutationError = ErrorType<unknown>;

export const useCardControllerBabyShowerCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBabyShowerCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBabyShowerCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/babyshower1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBabyShowerCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBabyShowerCard1>>
>;
export type CardControllerBabyShowerCard1MutationBody = CardDto;
export type CardControllerBabyShowerCard1MutationError = ErrorType<unknown>;

export const useCardControllerBabyShowerCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBabyShowerCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBabyShowerCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/babyshower2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBabyShowerCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBabyShowerCard2>>
>;
export type CardControllerBabyShowerCard2MutationBody = CardDto;
export type CardControllerBabyShowerCard2MutationError = ErrorType<unknown>;

export const useCardControllerBabyShowerCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBabyShowerCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBabyShowerCard3 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/babyshower3`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBabyShowerCard3MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBabyShowerCard3>>
>;
export type CardControllerBabyShowerCard3MutationBody = CardDto;
export type CardControllerBabyShowerCard3MutationError = ErrorType<unknown>;

export const useCardControllerBabyShowerCard3 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard3>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard3>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBabyShowerCard3(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBabyShowerCard3>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerCongratulationsCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/congratulationscard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerCongratulationsCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerCongratulationsCard>>
>;
export type CardControllerCongratulationsCardMutationBody = CardDto;
export type CardControllerCongratulationsCardMutationError = ErrorType<unknown>;

export const useCardControllerCongratulationsCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerCongratulationsCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerCongratulationsCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerCongratulationsCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerCongratulationsCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerThankYouCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/thankyoucard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerThankYouCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerThankYouCard>>
>;
export type CardControllerThankYouCardMutationBody = CardDto;
export type CardControllerThankYouCardMutationError = ErrorType<unknown>;

export const useCardControllerThankYouCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerThankYouCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerThankYouCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerThankYouCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerThankYouCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerGetWellSoonCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/getwellsooncard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerGetWellSoonCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerGetWellSoonCard>>
>;
export type CardControllerGetWellSoonCardMutationBody = CardDto;
export type CardControllerGetWellSoonCardMutationError = ErrorType<unknown>;

export const useCardControllerGetWellSoonCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerGetWellSoonCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerGetWellSoonCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/getwellsooncard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerGetWellSoonCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerGetWellSoonCard2>>
>;
export type CardControllerGetWellSoonCard2MutationBody = CardDto;
export type CardControllerGetWellSoonCard2MutationError = ErrorType<unknown>;

export const useCardControllerGetWellSoonCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerGetWellSoonCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerGetWellSoonCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/getwellsooncard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerGetWellSoonCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerGetWellSoonCard1>>
>;
export type CardControllerGetWellSoonCard1MutationBody = CardDto;
export type CardControllerGetWellSoonCard1MutationError = ErrorType<unknown>;

export const useCardControllerGetWellSoonCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerGetWellSoonCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerGetWellSoonCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerMissYouCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/missyoucard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerMissYouCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerMissYouCard>>
>;
export type CardControllerMissYouCardMutationBody = CardDto;
export type CardControllerMissYouCardMutationError = ErrorType<unknown>;

export const useCardControllerMissYouCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerMissYouCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerMissYouCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerMissYouCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerMissYouCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerMissYouCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/missyoucard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerMissYouCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerMissYouCard1>>
>;
export type CardControllerMissYouCard1MutationBody = CardDto;
export type CardControllerMissYouCard1MutationError = ErrorType<unknown>;

export const useCardControllerMissYouCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerMissYouCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerMissYouCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerMissYouCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerMissYouCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerMissYouCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/missyoucard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerMissYouCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerMissYouCard2>>
>;
export type CardControllerMissYouCard2MutationBody = CardDto;
export type CardControllerMissYouCard2MutationError = ErrorType<unknown>;

export const useCardControllerMissYouCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerMissYouCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerMissYouCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerMissYouCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerMissYouCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerMissYouCard3 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/missyoucard3`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerMissYouCard3MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerMissYouCard3>>
>;
export type CardControllerMissYouCard3MutationBody = CardDto;
export type CardControllerMissYouCard3MutationError = ErrorType<unknown>;

export const useCardControllerMissYouCard3 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerMissYouCard3>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerMissYouCard3>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerMissYouCard3(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerMissYouCard3>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerReceptionCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/receptioncard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerReceptionCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerReceptionCard>>
>;
export type CardControllerReceptionCardMutationBody = CardDto;
export type CardControllerReceptionCardMutationError = ErrorType<unknown>;

export const useCardControllerReceptionCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerReceptionCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerReceptionCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerReceptionCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerReceptionCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerReceptionCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/receptioncard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerReceptionCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerReceptionCard1>>
>;
export type CardControllerReceptionCard1MutationBody = CardDto;
export type CardControllerReceptionCard1MutationError = ErrorType<unknown>;

export const useCardControllerReceptionCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerReceptionCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerReceptionCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerReceptionCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerReceptionCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerReceptionCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/receptioncard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerReceptionCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerReceptionCard2>>
>;
export type CardControllerReceptionCard2MutationBody = CardDto;
export type CardControllerReceptionCard2MutationError = ErrorType<unknown>;

export const useCardControllerReceptionCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerReceptionCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerReceptionCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerReceptionCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerReceptionCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerReceptionCard3 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/receptioncard3`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerReceptionCard3MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerReceptionCard3>>
>;
export type CardControllerReceptionCard3MutationBody = CardDto;
export type CardControllerReceptionCard3MutationError = ErrorType<unknown>;

export const useCardControllerReceptionCard3 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerReceptionCard3>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerReceptionCard3>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerReceptionCard3(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerReceptionCard3>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerReceptionCard4 = (cardDto: CardDto) => {
  return customInstance<CardControllerReceptionCard4201>({
    url: `/api/card1/receptioncard4`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerReceptionCard4MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerReceptionCard4>>
>;
export type CardControllerReceptionCard4MutationBody = CardDto;
export type CardControllerReceptionCard4MutationError = ErrorType<unknown>;

export const useCardControllerReceptionCard4 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerReceptionCard4>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerReceptionCard4>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerReceptionCard4(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerReceptionCard4>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBirthdayCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/birthdaycard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBirthdayCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBirthdayCard>>
>;
export type CardControllerBirthdayCardMutationBody = CardDto;
export type CardControllerBirthdayCardMutationError = ErrorType<unknown>;

export const useCardControllerBirthdayCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBirthdayCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBirthdayCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBirthdayCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBirthdayCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBirthdayCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/birthdaycard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBirthdayCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBirthdayCard1>>
>;
export type CardControllerBirthdayCard1MutationBody = CardDto;
export type CardControllerBirthdayCard1MutationError = ErrorType<unknown>;

export const useCardControllerBirthdayCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBirthdayCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBirthdayCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBirthdayCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBirthdayCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerBirthdayCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/birthdaycard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerBirthdayCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerBirthdayCard2>>
>;
export type CardControllerBirthdayCard2MutationBody = CardDto;
export type CardControllerBirthdayCard2MutationError = ErrorType<unknown>;

export const useCardControllerBirthdayCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerBirthdayCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerBirthdayCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerBirthdayCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerBirthdayCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerAnniversaryCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/anniversarycard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerAnniversaryCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerAnniversaryCard>>
>;
export type CardControllerAnniversaryCardMutationBody = CardDto;
export type CardControllerAnniversaryCardMutationError = ErrorType<unknown>;

export const useCardControllerAnniversaryCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerAnniversaryCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerAnniversaryCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/anniversarycard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerAnniversaryCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerAnniversaryCard1>>
>;
export type CardControllerAnniversaryCard1MutationBody = CardDto;
export type CardControllerAnniversaryCard1MutationError = ErrorType<unknown>;

export const useCardControllerAnniversaryCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerAnniversaryCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerAnniversaryCard2 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/anniversarycard2`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerAnniversaryCard2MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerAnniversaryCard2>>
>;
export type CardControllerAnniversaryCard2MutationBody = CardDto;
export type CardControllerAnniversaryCard2MutationError = ErrorType<unknown>;

export const useCardControllerAnniversaryCard2 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard2>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard2>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerAnniversaryCard2(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard2>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerAnniversaryCard3 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/anniversarycard3`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerAnniversaryCard3MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerAnniversaryCard3>>
>;
export type CardControllerAnniversaryCard3MutationBody = CardDto;
export type CardControllerAnniversaryCard3MutationError = ErrorType<unknown>;

export const useCardControllerAnniversaryCard3 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard3>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard3>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerAnniversaryCard3(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerAnniversaryCard3>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerEngagementCard = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/engagementcard`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerEngagementCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerEngagementCard>>
>;
export type CardControllerEngagementCardMutationBody = CardDto;
export type CardControllerEngagementCardMutationError = ErrorType<unknown>;

export const useCardControllerEngagementCard = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerEngagementCard>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerEngagementCard>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerEngagementCard(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerEngagementCard>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerEngagementCard1 = (cardDto: CardDto) => {
  return customInstance<void>({
    url: `/api/card1/engagementcard1`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardDto,
  });
};

export type CardControllerEngagementCard1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerEngagementCard1>>
>;
export type CardControllerEngagementCard1MutationBody = CardDto;
export type CardControllerEngagementCard1MutationError = ErrorType<unknown>;

export const useCardControllerEngagementCard1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerEngagementCard1>>,
    TError,
    { data: CardDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerEngagementCard1>>,
    { data: CardDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardControllerEngagementCard1(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerEngagementCard1>>,
    TError,
    { data: CardDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<UserCardEntity[]>({
    url: `/api/card1/getall`,
    method: "get",
    signal,
  });
};

export const getCardControllerFindAllQueryKey = () => [`/api/card1/getall`];

export type CardControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerFindAll>>
>;
export type CardControllerFindAllQueryError = ErrorType<unknown>;

export const useCardControllerFindAll = <
  TData = Awaited<ReturnType<typeof cardControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCardControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardControllerFindAll>>
  > = ({ signal }) => cardControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerDraft = (signal?: AbortSignal) => {
  return customInstance<number>({
    url: `/api/card1/draft`,
    method: "get",
    signal,
  });
};

export const getCardControllerDraftQueryKey = () => [`/api/card1/draft`];

export type CardControllerDraftQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerDraft>>
>;
export type CardControllerDraftQueryError = ErrorType<unknown>;

export const useCardControllerDraft = <
  TData = Awaited<ReturnType<typeof cardControllerDraft>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardControllerDraft>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCardControllerDraftQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardControllerDraft>>
  > = ({ signal }) => cardControllerDraft(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardControllerDraft>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerPurchased = (signal?: AbortSignal) => {
  return customInstance<number>({
    url: `/api/card1/purchased`,
    method: "get",
    signal,
  });
};

export const getCardControllerPurchasedQueryKey = () => [
  `/api/card1/purchased`,
];

export type CardControllerPurchasedQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerPurchased>>
>;
export type CardControllerPurchasedQueryError = ErrorType<unknown>;

export const useCardControllerPurchased = <
  TData = Awaited<ReturnType<typeof cardControllerPurchased>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardControllerPurchased>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardControllerPurchasedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardControllerPurchased>>
  > = ({ signal }) => cardControllerPurchased(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardControllerPurchased>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerUpdatepaymentstatus = (
  id: string,
  updateCardUserDto: UpdateCardUserDto
) => {
  return customInstance<CardControllerUpdatepaymentstatus200>({
    url: `/api/card1/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: updateCardUserDto,
  });
};

export type CardControllerUpdatepaymentstatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerUpdatepaymentstatus>>
>;
export type CardControllerUpdatepaymentstatusMutationBody = UpdateCardUserDto;
export type CardControllerUpdatepaymentstatusMutationError = ErrorType<unknown>;

export const useCardControllerUpdatepaymentstatus = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerUpdatepaymentstatus>>,
    TError,
    { id: string; data: UpdateCardUserDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerUpdatepaymentstatus>>,
    { id: string; data: UpdateCardUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return cardControllerUpdatepaymentstatus(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerUpdatepaymentstatus>>,
    TError,
    { id: string; data: UpdateCardUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerFind = (userId: string, signal?: AbortSignal) => {
  return customInstance<UserCardEntity[]>({
    url: `/api/card1/${userId}`,
    method: "get",
    signal,
  });
};

export const getCardControllerFindQueryKey = (userId: string) => [
  `/api/card1/${userId}`,
];

export type CardControllerFindQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerFind>>
>;
export type CardControllerFindQueryError = ErrorType<unknown>;

export const useCardControllerFind = <
  TData = Awaited<ReturnType<typeof cardControllerFind>>,
  TError = ErrorType<unknown>
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof cardControllerFind>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardControllerFindQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardControllerFind>>
  > = ({ signal }) => cardControllerFind(userId, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardControllerFind>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!userId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customInstance<UserCardEntity>({
    url: `/api/card1/getCard/${id}`,
    method: "get",
    signal,
  });
};

export const getCardControllerFindOneQueryKey = (id: string) => [
  `/api/card1/getCard/${id}`,
];

export type CardControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerFindOne>>
>;
export type CardControllerFindOneQueryError = ErrorType<unknown>;

export const useCardControllerFindOne = <
  TData = Awaited<ReturnType<typeof cardControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof cardControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardControllerFindOne>>
  > = ({ signal }) => cardControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const cardControllerFindById = () => {
  return customInstance<UserCardEntity>({
    url: `/api/card1/findCardById`,
    method: "post",
  });
};

export type CardControllerFindByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerFindById>>
>;

export type CardControllerFindByIdMutationError = ErrorType<unknown>;

export const useCardControllerFindById = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerFindById>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerFindById>>,
    TVariables
  > = () => {
    return cardControllerFindById();
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerFindById>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerRemove = (id: string) => {
  return customInstance<void>({
    url: `/api/card1/delete/${id}`,
    method: "delete",
  });
};

export type CardControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerRemove>>
>;

export type CardControllerRemoveMutationError = ErrorType<unknown>;

export const useCardControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return cardControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardControllerRemove1 = (email: string) => {
  return customInstance<void>({
    url: `/api/card1/delete1/${email}`,
    method: "delete",
  });
};

export type CardControllerRemove1MutationResult = NonNullable<
  Awaited<ReturnType<typeof cardControllerRemove1>>
>;

export type CardControllerRemove1MutationError = ErrorType<unknown>;

export const useCardControllerRemove1 = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardControllerRemove1>>,
    TError,
    { email: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardControllerRemove1>>,
    { email: string }
  > = (props) => {
    const { email } = props ?? {};

    return cardControllerRemove1(email);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardControllerRemove1>>,
    TError,
    { email: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardetailsControllerCreate = (
  createCardetailDto: CreateCardetailDto
) => {
  return customInstance<CardEntity>({
    url: `/api/cardetails`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createCardetailDto,
  });
};

export type CardetailsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerCreate>>
>;
export type CardetailsControllerCreateMutationBody = CreateCardetailDto;
export type CardetailsControllerCreateMutationError = ErrorType<unknown>;

export const useCardetailsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardetailsControllerCreate>>,
    TError,
    { data: CreateCardetailDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardetailsControllerCreate>>,
    { data: CreateCardetailDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardetailsControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardetailsControllerCreate>>,
    TError,
    { data: CreateCardetailDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardetailsControllerFindOne = (signal?: AbortSignal) => {
  return customInstance<CardEntity[]>({
    url: `/api/cardetails`,
    method: "get",
    signal,
  });
};

export const getCardetailsControllerFindOneQueryKey = () => [`/api/cardetails`];

export type CardetailsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerFindOne>>
>;
export type CardetailsControllerFindOneQueryError = ErrorType<unknown>;

export const useCardetailsControllerFindOne = <
  TData = Awaited<ReturnType<typeof cardetailsControllerFindOne>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardetailsControllerFindOne>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardetailsControllerFindOneQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardetailsControllerFindOne>>
  > = ({ signal }) => cardetailsControllerFindOne(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardetailsControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardetailsControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<CardEntity[]>({
    url: `/api/cardetails/cardetails`,
    method: "get",
    signal,
  });
};

export const getCardetailsControllerFindAllQueryKey = () => [
  `/api/cardetails/cardetails`,
];

export type CardetailsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerFindAll>>
>;
export type CardetailsControllerFindAllQueryError = ErrorType<unknown>;

export const useCardetailsControllerFindAll = <
  TData = Awaited<ReturnType<typeof cardetailsControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardetailsControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardetailsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardetailsControllerFindAll>>
  > = ({ signal }) => cardetailsControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardetailsControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardetailsControllerGetCardsByPrice = (
  params?: CardetailsControllerGetCardsByPriceParams,
  signal?: AbortSignal
) => {
  return customInstance<CardetailsControllerGetCardsByPrice200>({
    url: `/api/cardetails/getCardsByPrice`,
    method: "get",
    params,
    signal,
  });
};

export const getCardetailsControllerGetCardsByPriceQueryKey = (
  params?: CardetailsControllerGetCardsByPriceParams
) => [`/api/cardetails/getCardsByPrice`, ...(params ? [params] : [])];

export type CardetailsControllerGetCardsByPriceQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerGetCardsByPrice>>
>;
export type CardetailsControllerGetCardsByPriceQueryError = ErrorType<unknown>;

export const useCardetailsControllerGetCardsByPrice = <
  TData = Awaited<ReturnType<typeof cardetailsControllerGetCardsByPrice>>,
  TError = ErrorType<unknown>
>(
  params?: CardetailsControllerGetCardsByPriceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof cardetailsControllerGetCardsByPrice>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCardetailsControllerGetCardsByPriceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardetailsControllerGetCardsByPrice>>
  > = ({ signal }) => cardetailsControllerGetCardsByPrice(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardetailsControllerGetCardsByPrice>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardetailsControllerFind = () => {
  return customInstance<CardEntity>({
    url: `/api/cardetails/getById`,
    method: "post",
  });
};

export type CardetailsControllerFindMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerFind>>
>;

export type CardetailsControllerFindMutationError = ErrorType<unknown>;

export const useCardetailsControllerFind = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardetailsControllerFind>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardetailsControllerFind>>,
    TVariables
  > = () => {
    return cardetailsControllerFind();
  };

  return useMutation<
    Awaited<ReturnType<typeof cardetailsControllerFind>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const cardetailsControllerUpdateCardDetails = (
  id: string,
  cardDetailsDto: CardDetailsDto
) => {
  return customInstance<CardetailsControllerUpdateCardDetails200>({
    url: `/api/cardetails/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: cardDetailsDto,
  });
};

export type CardetailsControllerUpdateCardDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerUpdateCardDetails>>
>;
export type CardetailsControllerUpdateCardDetailsMutationBody = CardDetailsDto;
export type CardetailsControllerUpdateCardDetailsMutationError =
  ErrorType<unknown>;

export const useCardetailsControllerUpdateCardDetails = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardetailsControllerUpdateCardDetails>>,
    TError,
    { id: string; data: CardDetailsDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardetailsControllerUpdateCardDetails>>,
    { id: string; data: CardDetailsDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return cardetailsControllerUpdateCardDetails(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardetailsControllerUpdateCardDetails>>,
    TError,
    { id: string; data: CardDetailsDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardetailsControllerRemove = (id: string) => {
  return customInstance<string>({
    url: `/api/cardetails/${id}`,
    method: "delete",
  });
};

export type CardetailsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardetailsControllerRemove>>
>;

export type CardetailsControllerRemoveMutationError = ErrorType<unknown>;

export const useCardetailsControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardetailsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardetailsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return cardetailsControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardetailsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const videoControllerCreate = (videoDto: VideoDto) => {
  return customInstance<void>({
    url: `/api/video/create`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: videoDto,
  });
};

export type VideoControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof videoControllerCreate>>
>;
export type VideoControllerCreateMutationBody = VideoDto;
export type VideoControllerCreateMutationError = ErrorType<unknown>;

export const useVideoControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof videoControllerCreate>>,
    TError,
    { data: VideoDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof videoControllerCreate>>,
    { data: VideoDto }
  > = (props) => {
    const { data } = props ?? {};

    return videoControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof videoControllerCreate>>,
    TError,
    { data: VideoDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const videoredisControllerVideoQueue = (
  createVideorediDto: CreateVideorediDto
) => {
  return customInstance<void>({
    url: `/api/videoredis/video`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createVideorediDto,
  });
};

export type VideoredisControllerVideoQueueMutationResult = NonNullable<
  Awaited<ReturnType<typeof videoredisControllerVideoQueue>>
>;
export type VideoredisControllerVideoQueueMutationBody = CreateVideorediDto;
export type VideoredisControllerVideoQueueMutationError = ErrorType<unknown>;

export const useVideoredisControllerVideoQueue = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof videoredisControllerVideoQueue>>,
    TError,
    { data: CreateVideorediDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof videoredisControllerVideoQueue>>,
    { data: CreateVideorediDto }
  > = (props) => {
    const { data } = props ?? {};

    return videoredisControllerVideoQueue(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof videoredisControllerVideoQueue>>,
    TError,
    { data: CreateVideorediDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardcaptiondetailsControllerCreate = (
  cardsCaptionDto: CardsCaptionDto
) => {
  return customInstance<CardcaptionEntity>({
    url: `/api/cardcaptiondetails`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: cardsCaptionDto,
  });
};

export type CardcaptiondetailsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardcaptiondetailsControllerCreate>>
>;
export type CardcaptiondetailsControllerCreateMutationBody = CardsCaptionDto;
export type CardcaptiondetailsControllerCreateMutationError =
  ErrorType<unknown>;

export const useCardcaptiondetailsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerCreate>>,
    TError,
    { data: CardsCaptionDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerCreate>>,
    { data: CardsCaptionDto }
  > = (props) => {
    const { data } = props ?? {};

    return cardcaptiondetailsControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerCreate>>,
    TError,
    { data: CardsCaptionDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardcaptiondetailsControllerFindOne = (signal?: AbortSignal) => {
  return customInstance<CardcaptionEntity>({
    url: `/api/cardcaptiondetails`,
    method: "get",
    signal,
  });
};

export const getCardcaptiondetailsControllerFindOneQueryKey = () => [
  `/api/cardcaptiondetails`,
];

export type CardcaptiondetailsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardcaptiondetailsControllerFindOne>>
>;
export type CardcaptiondetailsControllerFindOneQueryError = ErrorType<unknown>;

export const useCardcaptiondetailsControllerFindOne = <
  TData = Awaited<ReturnType<typeof cardcaptiondetailsControllerFindOne>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindOne>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardcaptiondetailsControllerFindOneQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindOne>>
  > = ({ signal }) => cardcaptiondetailsControllerFindOne(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardcaptiondetailsControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<CardcaptionEntity[]>({
    url: `/api/cardcaptiondetails/cardetails`,
    method: "get",
    signal,
  });
};

export const getCardcaptiondetailsControllerFindAllQueryKey = () => [
  `/api/cardcaptiondetails/cardetails`,
];

export type CardcaptiondetailsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof cardcaptiondetailsControllerFindAll>>
>;
export type CardcaptiondetailsControllerFindAllQueryError = ErrorType<unknown>;

export const useCardcaptiondetailsControllerFindAll = <
  TData = Awaited<ReturnType<typeof cardcaptiondetailsControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCardcaptiondetailsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindAll>>
  > = ({ signal }) => cardcaptiondetailsControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const cardcaptiondetailsControllerUpdateCaptionDetails = (
  id: string,
  createCaptionDto: CreateCaptionDto
) => {
  return customInstance<CardcaptiondetailsControllerUpdateCaptionDetails200>({
    url: `/api/cardcaptiondetails/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: createCaptionDto,
  });
};

export type CardcaptiondetailsControllerUpdateCaptionDetailsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerUpdateCaptionDetails>>
  >;
export type CardcaptiondetailsControllerUpdateCaptionDetailsMutationBody =
  CreateCaptionDto;
export type CardcaptiondetailsControllerUpdateCaptionDetailsMutationError =
  ErrorType<unknown>;

export const useCardcaptiondetailsControllerUpdateCaptionDetails = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof cardcaptiondetailsControllerUpdateCaptionDetails>
    >,
    TError,
    { id: string; data: CreateCaptionDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<
      ReturnType<typeof cardcaptiondetailsControllerUpdateCaptionDetails>
    >,
    { id: string; data: CreateCaptionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return cardcaptiondetailsControllerUpdateCaptionDetails(id, data);
  };

  return useMutation<
    Awaited<
      ReturnType<typeof cardcaptiondetailsControllerUpdateCaptionDetails>
    >,
    TError,
    { id: string; data: CreateCaptionDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const cardcaptiondetailsControllerRemove = (id: string) => {
  return customInstance<string>({
    url: `/api/cardcaptiondetails/${id}`,
    method: "delete",
  });
};

export type CardcaptiondetailsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof cardcaptiondetailsControllerRemove>>
>;

export type CardcaptiondetailsControllerRemoveMutationError =
  ErrorType<unknown>;

export const useCardcaptiondetailsControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return cardcaptiondetailsControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof cardcaptiondetailsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const contactusControllerCreate = (
  createContactusDto: CreateContactusDto
) => {
  return customInstance<Contactus>({
    url: `/api/contactus`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createContactusDto,
  });
};

export type ContactusControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof contactusControllerCreate>>
>;
export type ContactusControllerCreateMutationBody = CreateContactusDto;
export type ContactusControllerCreateMutationError = ErrorType<unknown>;

export const useContactusControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof contactusControllerCreate>>,
    TError,
    { data: CreateContactusDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof contactusControllerCreate>>,
    { data: CreateContactusDto }
  > = (props) => {
    const { data } = props ?? {};

    return contactusControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof contactusControllerCreate>>,
    TError,
    { data: CreateContactusDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const contactusControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<Contactus[]>({
    url: `/api/contactus`,
    method: "get",
    signal,
  });
};

export const getContactusControllerFindAllQueryKey = () => [`/api/contactus`];

export type ContactusControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof contactusControllerFindAll>>
>;
export type ContactusControllerFindAllQueryError = ErrorType<unknown>;

export const useContactusControllerFindAll = <
  TData = Awaited<ReturnType<typeof contactusControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof contactusControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getContactusControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof contactusControllerFindAll>>
  > = ({ signal }) => contactusControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof contactusControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const contactusControllerFindOne = (
  id: string,
  signal?: AbortSignal
) => {
  return customInstance<string>({
    url: `/api/contactus/${id}`,
    method: "get",
    signal,
  });
};

export const getContactusControllerFindOneQueryKey = (id: string) => [
  `/api/contactus/${id}`,
];

export type ContactusControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof contactusControllerFindOne>>
>;
export type ContactusControllerFindOneQueryError = ErrorType<unknown>;

export const useContactusControllerFindOne = <
  TData = Awaited<ReturnType<typeof contactusControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof contactusControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getContactusControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof contactusControllerFindOne>>
  > = ({ signal }) => contactusControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof contactusControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const contactusControllerRemove = (id: string) => {
  return customInstance<void>({
    url: `/api/contactus/${id}`,
    method: "delete",
  });
};

export type ContactusControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof contactusControllerRemove>>
>;

export type ContactusControllerRemoveMutationError = ErrorType<unknown>;

export const useContactusControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof contactusControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof contactusControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return contactusControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof contactusControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const paymentgatewayControllerCreate = (
  createPaymentgatewayDto: CreatePaymentgatewayDto
) => {
  return customInstance<PaymentgatewayControllerCreate201>({
    url: `/api/paymentgateway`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createPaymentgatewayDto,
  });
};

export type PaymentgatewayControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentgatewayControllerCreate>>
>;
export type PaymentgatewayControllerCreateMutationBody =
  CreatePaymentgatewayDto;
export type PaymentgatewayControllerCreateMutationError = ErrorType<unknown>;

export const usePaymentgatewayControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentgatewayControllerCreate>>,
    TError,
    { data: CreatePaymentgatewayDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentgatewayControllerCreate>>,
    { data: CreatePaymentgatewayDto }
  > = (props) => {
    const { data } = props ?? {};

    return paymentgatewayControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof paymentgatewayControllerCreate>>,
    TError,
    { data: CreatePaymentgatewayDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const paymentgatewayControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<string>({
    url: `/api/paymentgateway`,
    method: "get",
    signal,
  });
};

export const getPaymentgatewayControllerFindAllQueryKey = () => [
  `/api/paymentgateway`,
];

export type PaymentgatewayControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentgatewayControllerFindAll>>
>;
export type PaymentgatewayControllerFindAllQueryError = ErrorType<unknown>;

export const usePaymentgatewayControllerFindAll = <
  TData = Awaited<ReturnType<typeof paymentgatewayControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof paymentgatewayControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentgatewayControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentgatewayControllerFindAll>>
  > = ({ signal }) => paymentgatewayControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof paymentgatewayControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const paymentgatewayControllerSuccess = (successDto: SuccessDto) => {
  return customInstance<PaymentgatewayControllerSuccess201>({
    url: `/api/paymentgateway/success`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: successDto,
  });
};

export type PaymentgatewayControllerSuccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentgatewayControllerSuccess>>
>;
export type PaymentgatewayControllerSuccessMutationBody = SuccessDto;
export type PaymentgatewayControllerSuccessMutationError = ErrorType<unknown>;

export const usePaymentgatewayControllerSuccess = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentgatewayControllerSuccess>>,
    TError,
    { data: SuccessDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentgatewayControllerSuccess>>,
    { data: SuccessDto }
  > = (props) => {
    const { data } = props ?? {};

    return paymentgatewayControllerSuccess(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof paymentgatewayControllerSuccess>>,
    TError,
    { data: SuccessDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const paymentgatewayControllerFindOne = (
  id: string,
  signal?: AbortSignal
) => {
  return customInstance<string>({
    url: `/api/paymentgateway/${id}`,
    method: "get",
    signal,
  });
};

export const getPaymentgatewayControllerFindOneQueryKey = (id: string) => [
  `/api/paymentgateway/${id}`,
];

export type PaymentgatewayControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentgatewayControllerFindOne>>
>;
export type PaymentgatewayControllerFindOneQueryError = ErrorType<unknown>;

export const usePaymentgatewayControllerFindOne = <
  TData = Awaited<ReturnType<typeof paymentgatewayControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof paymentgatewayControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentgatewayControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentgatewayControllerFindOne>>
  > = ({ signal }) => paymentgatewayControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof paymentgatewayControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const paymentgatewayControllerRemove = (id: string) => {
  return customInstance<string>({
    url: `/api/paymentgateway/${id}`,
    method: "delete",
  });
};

export type PaymentgatewayControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentgatewayControllerRemove>>
>;

export type PaymentgatewayControllerRemoveMutationError = ErrorType<unknown>;

export const usePaymentgatewayControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentgatewayControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentgatewayControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return paymentgatewayControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof paymentgatewayControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const customizecardsqueryControllerCreate = (
  createCustomizecardsqueryDto: CreateCustomizecardsqueryDto
) => {
  return customInstance<void>({
    url: `/api/customizecardsquery`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createCustomizecardsqueryDto,
  });
};

export type CustomizecardsqueryControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof customizecardsqueryControllerCreate>>
>;
export type CustomizecardsqueryControllerCreateMutationBody =
  CreateCustomizecardsqueryDto;
export type CustomizecardsqueryControllerCreateMutationError =
  ErrorType<unknown>;

export const useCustomizecardsqueryControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customizecardsqueryControllerCreate>>,
    TError,
    { data: CreateCustomizecardsqueryDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customizecardsqueryControllerCreate>>,
    { data: CreateCustomizecardsqueryDto }
  > = (props) => {
    const { data } = props ?? {};

    return customizecardsqueryControllerCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof customizecardsqueryControllerCreate>>,
    TError,
    { data: CreateCustomizecardsqueryDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const customizecardsqueryControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<Customizecardsquery[]>({
    url: `/api/customizecardsquery`,
    method: "get",
    signal,
  });
};

export const getCustomizecardsqueryControllerFindAllQueryKey = () => [
  `/api/customizecardsquery`,
];

export type CustomizecardsqueryControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof customizecardsqueryControllerFindAll>>
>;
export type CustomizecardsqueryControllerFindAllQueryError = ErrorType<unknown>;

export const useCustomizecardsqueryControllerFindAll = <
  TData = Awaited<ReturnType<typeof customizecardsqueryControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof customizecardsqueryControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCustomizecardsqueryControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customizecardsqueryControllerFindAll>>
  > = ({ signal }) => customizecardsqueryControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof customizecardsqueryControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const customizecardsqueryControllerFindOne = (
  id: string,
  signal?: AbortSignal
) => {
  return customInstance<string>({
    url: `/api/customizecardsquery/${id}`,
    method: "get",
    signal,
  });
};

export const getCustomizecardsqueryControllerFindOneQueryKey = (id: string) => [
  `/api/customizecardsquery/${id}`,
];

export type CustomizecardsqueryControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof customizecardsqueryControllerFindOne>>
>;
export type CustomizecardsqueryControllerFindOneQueryError = ErrorType<unknown>;

export const useCustomizecardsqueryControllerFindOne = <
  TData = Awaited<ReturnType<typeof customizecardsqueryControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof customizecardsqueryControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCustomizecardsqueryControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customizecardsqueryControllerFindOne>>
  > = ({ signal }) => customizecardsqueryControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof customizecardsqueryControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const customizecardsqueryControllerRemove = (id: string) => {
  return customInstance<void>({
    url: `/api/customizecardsquery/${id}`,
    method: "delete",
  });
};

export type CustomizecardsqueryControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof customizecardsqueryControllerRemove>>
>;

export type CustomizecardsqueryControllerRemoveMutationError =
  ErrorType<unknown>;

export const useCustomizecardsqueryControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customizecardsqueryControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customizecardsqueryControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return customizecardsqueryControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof customizecardsqueryControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const uploadfileControllerUpload = (folder: string) => {
  return customInstance<void>({
    url: `/api/uploadfile/${folder}`,
    method: "post",
  });
};

export type UploadfileControllerUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadfileControllerUpload>>
>;

export type UploadfileControllerUploadMutationError = ErrorType<unknown>;

export const useUploadfileControllerUpload = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadfileControllerUpload>>,
    TError,
    { folder: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadfileControllerUpload>>,
    { folder: string }
  > = (props) => {
    const { folder } = props ?? {};

    return uploadfileControllerUpload(folder);
  };

  return useMutation<
    Awaited<ReturnType<typeof uploadfileControllerUpload>>,
    TError,
    { folder: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const uploadfileControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/uploadfile`,
    method: "get",
    signal,
  });
};

export const getUploadfileControllerFindAllQueryKey = () => [`/api/uploadfile`];

export type UploadfileControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof uploadfileControllerFindAll>>
>;
export type UploadfileControllerFindAllQueryError = ErrorType<unknown>;

export const useUploadfileControllerFindAll = <
  TData = Awaited<ReturnType<typeof uploadfileControllerFindAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof uploadfileControllerFindAll>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUploadfileControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof uploadfileControllerFindAll>>
  > = ({ signal }) => uploadfileControllerFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof uploadfileControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const uploadfileControllerFindOne = (
  id: string,
  signal?: AbortSignal
) => {
  return customInstance<string>({
    url: `/api/uploadfile/${id}`,
    method: "get",
    signal,
  });
};

export const getUploadfileControllerFindOneQueryKey = (id: string) => [
  `/api/uploadfile/${id}`,
];

export type UploadfileControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof uploadfileControllerFindOne>>
>;
export type UploadfileControllerFindOneQueryError = ErrorType<unknown>;

export const useUploadfileControllerFindOne = <
  TData = Awaited<ReturnType<typeof uploadfileControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof uploadfileControllerFindOne>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUploadfileControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof uploadfileControllerFindOne>>
  > = ({ signal }) => uploadfileControllerFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof uploadfileControllerFindOne>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const uploadfileControllerRemove = (id: string) => {
  return customInstance<void>({
    url: `/api/uploadfile/${id}`,
    method: "delete",
  });
};

export type UploadfileControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadfileControllerRemove>>
>;

export type UploadfileControllerRemoveMutationError = ErrorType<unknown>;

export const useUploadfileControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadfileControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadfileControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return uploadfileControllerRemove(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof uploadfileControllerRemove>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
